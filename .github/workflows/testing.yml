name: Django Tests

on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.7
      uses: actions/setup-python@v2
      with:
        python-version: 3.7
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8
    - name: Coverage report
      run: |
        pip install coverage
        coverage run manage.py test
        Coverage report
    - name: Django Testing
        #Jack's tests
        def test_created_Software(self):
          x = self.create_Software()
          self.assertTrue(isinstance(x, SubmittedSoftware))
          self.assertEqual(x.__unicode__(), x.name)

        def test_form_valid(self):        
          x = self.create_Software()
          data = {'name': x.name, 'developer': x.developer, 'description': x.description, 'Word Processer': x.tag_WordProcesser, 
            'Spreadsheet Editor': x.tag_SpreadSheet, 'Graphics Editor': x.tag_GraphicsEditor, 'Audio Editor': x.tag_AudioEditor, 
            'Communication': x.tag_Communication, 'Multimedia': x.tag_Multimedia, 'AntiVirus': x.tag_AntiVirus, 'Code Editor': x.tag_CodeEditor, 
            'Disk Burner': x.tag_DiskBurner, 'File Sharing': x.tag_FileShare, 'Other': x.tag_Other, 'Windows': x.os_WIN, 
            'Mac OS X': x.os_MAC, 'Linux': x.os_NIX, 'image': x.image,}
            form = SubmitSoftwareForm(data=data)
            self.assertFalse(form.is_valid())

        def test_form_invalid(self):
          x = SubmittedSoftware.objects.create(name='name test', developer='dev test', description='desc test', tag_WordProcesser=True, tag_SpreadSheet=True, tag_GraphicsEditor=False, tag_AudioEditor=False, tag_Communication=False, tag_Multimedia=False, tag_AntiVirus=False, tag_CodeEditor=False, tag_DiskBurner=False, tag_FileShare=False, tag_Other=False, os_WIN=True, os_MAC=False, os_NIX=False, image="img/audacity.png")
            data = {'name': x.name, 'developer': x.developer, 'description': x.description, 'Word Processer': x.tag_WordProcesser, 
            'Spreadsheet Editor': x.tag_SpreadSheet, 'Graphics Editor': x.tag_GraphicsEditor, 'Audio Editor': x.tag_AudioEditor, 
            'Communication': x.tag_Communication, 'Multimedia': x.tag_Multimedia, 'AntiVirus': x.tag_AntiVirus, 'Code Editor': x.tag_CodeEditor, 
            'Disk Burner': x.tag_DiskBurner, 'File Sharing': x.tag_FileShare, 'Other': x.tag_Other, 'Windows': x.os_WIN, 
            'Mac OS X': x.os_MAC, 'Linux': x.os_NIX, 'image': x.image,}
            form = SubmitSoftwareForm(data=data)
            self.assertFalse(form.is_valid())

        def test_software_submit_button(self):
          self.driver = webdriver.Firefox()
          self.driver.get("http://localhost:8000/SoftwareSubmissionPage")
          #self.driver.find_element(By.XPATH, "//*[@id='id_name']").send_keys("test name")
          #self.driver.find_element(By.NAME, 'id_name').send_keys("test name")
          self.driver.find_element(By.XPATH, '//*[@id="id_tag_WordProcesser"]').click()
          self.assertIn("http://localhost:8000/", self.driver.current_url)
          self.driver.quit()

        def test_software_submit_tags_valid(self):
          self.driver = webdriver.Firefox()
          self.driver.get("http://localhost:8000/SoftwareSubmissionPage")
          self.driver.find_element(By.XPATH, '//*[@id="id_tag_WordProcesser"]').click()
          self.assertIn("http://localhost:8000/", self.driver.current_url)
          self.driver.quit()

        def test_software_submit_tags_invalid(self):
          self.driver = webdriver.Firefox()
          self.driver.get("http://localhost:8000/SoftwareSubmissionPage")
          self.driver.find_element(By.XPATH, '//*[@id="id_tag_WordProcesser"]').send_keys("words")
          self.assertIn("http://localhost:8000/", self.driver.current_url)
          self.driver.quit()

        #Rajeev's tests

        def test_dropdown_menu_is_zero(self):
          data = {'my_dropdown': 0}
          form = MyForm(data=data)
          self.assertEqual(form.is_valid(), True)
          self.assertEqual(form.cleaned_data['my_dropdown'], 0)

          # Set the value to a non-zero value and verify it's no longer 0
          data = {'my_dropdown': 3}
          form = MyForm(data=data)
          self.assertEqual(form.is_valid(), True)
          self.assertNotEqual(form.cleaned_data['my_dropdown'], 0)

        def test_dropdown_menu_is_one(self):
          data = {'my_dropdown': 1}
          form = MyForm(data=data)
          self.assertEqual(form.is_valid(), True)
          self.assertEqual(form.cleaned_data['my_dropdown'], 1)

          # Set the value to a non-one value and verify it's no longer 1
          data = {'my_dropdown': 3}
          form = MyForm(data=data)
          self.assertEqual(form.is_valid(), True)
          self.assertNotEqual(form.cleaned_data['my_dropdown'], 1)

        def test_dropdown_menu_is_two(self):
          data = {'my_dropdown': 2}
          form = MyForm(data=data)
          self.assertEqual(form.is_valid(), True)
          self.assertEqual(form.cleaned_data['my_dropdown'], 2)

          # Set the value to a non-two value and verify it's no longer 2
          data = {'my_dropdown': 3}
          form = MyForm(data=data)
          self.assertEqual(form.is_valid(), True)
          self.assertNotEqual(form.cleaned_data['my_dropdown'], 2)

        def test_dropdown_menu_is_three(self):
          data = {'my_dropdown': 3}
          form = MyForm(data=data)
          self.assertEqual(form.is_valid(), True)
          self.assertEqual(form.cleaned_data['my_dropdown'], 3)

          # Set the value to a non-three value and verify it's no longer 3
          data = {'my_dropdown': 2}
          form = MyForm(data=data)
          self.assertEqual(form.is_valid(), True)
          self.assertNotEqual(form.cleaned_data['my_dropdown'], 3)

        def test_dropdown_menu_is_four(self):
          data = {'my_dropdown': 4}
          form = MyForm(data=data)
          self.assertEqual(form.is_valid(), True)
          self.assertEqual(form.cleaned_data['my_dropdown'], 4)

          # Set the value to a non-four value and verify it's no longer 4
          data = {'my_dropdown': 3}
          form = MyForm(data=data)
          self.assertEqual(form.is_valid(), True)
          self.assertNotEqual(form.cleaned_data['my_dropdown'], 4)

        def test_dropdown_menu_is_five(self):
          data = {'my_dropdown': 5}
          form = MyForm(data=data)
          self.assertEqual(form.is_valid(), True)
          self.assertEqual(form.cleaned_data['my_dropdown'], 5)

          # Set the value to a non-five value and verify it's no longer 5
          data = {'my_dropdown': 4}
          form = MyForm(data=data)
          self.assertEqual(form.is_valid(), True)
          self.assertNotEqual(form.cleaned_data['my_dropdown'], 5)

        #Sahith's tests
        def test_reportbugs(self):
          response = self.client.get(reverse('bug_submit'))
          self.assertEqual(response.status_code, 200)

        def test_aboutpage_content(self):
          response = self.client.get(reverse('about'))
          self.assertContains(response, "About FOSS")

        def test_darkmode(self):
          response = self.client.get(reverse('software_index'))

        def test_homepage(self):
          response = self.client.get(reverse('software_index'))
          self.assertEqual(response.status_code, 200)

        def test_aboutpage(self)
          response = self.client.get(reverse('about'))

        def test_softwaresubmission(self)
          response = self.client.get(reverse('software_submit'))
          self.assertEqual(response.status_code, 200)

        #Shane's tests

        def test_missing_title(self):
          form_data = {'description': 'Test Bug Description',
            'image': SimpleUploadedFile("test_image.jpg", b"file_content", content_type="image/jpeg"),
          }
          form = SubmitBugsForm(data=form_data, files=form_data)
          self.assertEqual(form.errors['title'], ['This field is required.'])

        def test_missing_description(self):
          form_data = {
              'title': 'Test Bug Title',
              'image': SimpleUploadedFile("test_image.jpg", b"file_content", content_type="image/jpeg"),
          }
          form = SubmitBugsForm(data=form_data, files=form_data)
          self.assertEqual(form.errors['description'], ['This field is required.'])

        def test_missing_image_type(self):
          form_data = {
              'title': 'Test Bug Title',
              'description': 'Test Bug Description',
          }
          form = SubmitBugsForm(data=form_data, files=form_data)
          self.assertEqual(form.errors['image'], ['This field is required.'])

        def test_blank_form_submission(self):
          form_data = {}
          form = SubmitBugsForm(data=form_data, files=form_data)
          self.assertEqual(form.errors['title'], ['This field is required.'])
          self.assertEqual(form.errors['description'], ['This field is required.'])
          self.assertEqual(form.errors['image'], ['This field is required.'])

        def test_form_incorrect_info(self):
          form_data = {
              'title': 85,
              'description': -1,
              'image': 0
          }
          form = SubmitBugsForm(data=form_data, files=form_data)
          self.assertFalse(form.is_valid())

        def test_form_blank_not_valid(self):
          form_data = {}
          form = SubmitBugsForm(data=form_data, files=form_data)
          self.assertFalse(form.is_valid())

